#Directiva inicial, se tiene que establecer un nombre para la acción
name: Deploy to server
on: push

jobs:
  first_job:
    # Los contextos nos permiten acceder a la informacion sobre los workflows que se están ejecutando
    # En este caso, se ejecuta solo si el push es a la rama main
    # Se puede usar el '&&' o '||' para combinar condiciones
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    steps:
      - name: Hola mundo
        run: echo "Hola mundo"

  second_job:
    # This job depends on the first_job -> Es una dependencia
    # Si un job falla, los jobs que dependen de él no se ejecutarán
    needs: first_job
    runs-on: ubuntu-latest
    # Se define outputs para que el tercer job pueda usar los outputs del segundo job
    outputs:
      # Se puede establecer una variable de salida que se puede usar en otros jobs
      output_var: ${{ steps.set_output.outputs.output_var }}
    steps:
      - name: Hola mundo
        run: echo "Hola mundo otra vez"

        # Se puede definir un entorno para el job o a nivel de paso o a nivel de job
        # Esto es útil para definir variables de entorno que se pueden usar en el job
        env:
          MY_ENV_VAR: "Hello World"
          run: echo "El valor de MY_ENV_VAR es $MY_ENV_VAR"

      # Usando una action de GitHub
      #Los actions se ejecutan a nivel de step, buena practica asignarles un nombre descriptivo
      # Se pueden usar acciones de GitHub o acciones personalizadas
      - name: Action
        #Directiva uses para usar una action de GitHub
        uses: actions/checkout@v4
      - name: working dir after action
        run: ls -al

      # GITHUB_OUTPUT es una variable de entorno que se puede usar para pasar datos entre jobs
      # En este caso, se usa para establecer una variable de salida que se puede usar en otros jobs
      # Se puede usar para pasar datos entre jobs o para establecer variables de entorno
      - name: Set output variable
        # Se tiene que establecer el id del paso para poder usar la variable de salida
        id: set_output
        run: echo "output_var= Mensaje almacenado" >> $GITHUB_OUTPUT

      # Usando la variable de salida establecida en el paso anterior
      - name: Use output variable
        run: echo "El valor de la variable de salida es ${{ steps.set_output.outputs.output_var }}"

  third_job:
    # Este job depende del segundo job
    needs: second_job
    runs-on: ubuntu-latest
    steps:
      - name: Hola mundo
        run: echo "Hola mundo otra vez"
      - name: Use output variable from second job
        # Se puede usar la variable de salida del segundo job a traves de la directiva needs,
        # ya que el segundo job es una dependencia del tercer job
        run: echo "El valor de la variable de salida es ${{ needs.second_job.outputs.output_var }}"

      # Artefactos
      # Los artefactos son archivos que se pueden guardar y usar en otros jobs o workflows
      - name: Generar archivo
        run: |
          echo "Este es un archivo de ejemplo" > test.log
      # Para subir un artefacto, se puede usar la action de GitHub actions/upload-artifact
      - name: Subir artefacto
        uses: actions/upload-artifact@v4
        with:
          # Se tienen que pasar parametros a la action
          # El nombre del artefacto que se va a subir y el path del archivo que se va a subir
          name: test-artifact
          path: test.log
      # Para descargar un artefacto, se puede usar la action de GitHub actions/download-artifact
      - name: Descargar artefacto
        uses: actions/download-artifact@v4
        with:
          # El nombre del artefacto que se va a descargar
          name: test-artifact
